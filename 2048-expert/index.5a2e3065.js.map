{"mappings":"AAAA,MAAMA,EAAYC,SAASC,cAAc,eACnCC,EAAsBF,SAASG,eAAe,iBAC9CC,EAAmBJ,SAASG,eAAe,cAEjD,IACIE,EAAQ,GACRC,EAAe,EACfC,EAA+B,OAAnBC,eAA0B,EAAIA,eAgB9C,SAASC,IACP,MAAMC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWR,EAAMS,QACjB,GAAzBT,EAAMK,GAAMK,UACdV,EAAMK,GAAMK,UAUHJ,KAAKE,SACF,GAAM,EAAI,IA6L1B,WACE,IAAIG,EAAgB,EACpB,IAAK,IAAIC,EAAI,EAAGA,EAhOFC,GAgOiBD,IACH,GAAtBZ,EAAMY,GAAGF,WACXC,IAGiB,GAAjBA,IACFG,MAAM,iCAAmCb,GACzCc,I,CA9MAC,GACAZ,I,CAWJ,SAASa,IACPb,IACAA,G,CAGF,SAASc,IAEP,IAAK,IAAIN,EAAI,EAAGA,EA7CJ,EA6CeA,IAAK,CAE9B,IAAIO,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAhDN,EAgDiBA,IAAK,CAC9B,IAAIC,EAAOrB,EAAMY,EAjDT,EAiDqBQ,GAAGV,UAChCS,EAAOG,KAAKC,SAASF,G,CAGvBF,EAASA,EAAOK,QAAQC,GAAQA,IAChC,IAAIC,EAtDM,EAsDoBP,EAAOV,OACjCkB,EAAYC,MAAMF,GAAiBG,KAAK,GAAGC,OAAOX,GAEtD,IAAK,IAAIC,EAAI,EAAGA,EAzDN,EAyDiBA,IACzBpB,EAAMY,EA1DE,EA0DUQ,GAAGV,UAAYiB,EAAUP,E,EAKjD,SAASW,IAEP,IAAK,IAAInB,EAAI,EAAGA,EAjEJ,EAiEeA,IAAK,CAE9B,IAAIO,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EApEN,EAoEiBA,IAAK,CAC9B,IAAIC,EAAOrB,EAAMY,EArET,EAqEqBQ,GAAGV,UAChCS,EAAOG,KAAKC,SAASF,G,CAGvBF,EAASA,EAAOK,QAAQC,GAAQA,IAChC,IAAIC,EA1EM,EA0EoBP,EAAOV,OAEjCkB,EAAYR,EAAOW,OAAOF,MAAMF,GAAiBG,KAAK,IAE1D,IAAK,IAAIT,EAAI,EAAGA,EA9EN,EA8EiBA,IACzBpB,EAAMY,EA/EE,EA+EUQ,GAAGV,UAAYiB,EAAUP,E,EAKjD,SAASY,IAEP,IAAK,IAAIpB,EAAI,EAAGA,EArFFC,GAqFiBD,GAtFnB,EAsF+B,CAEzC,IAAIqB,EAAM,GACV,IAAK,IAAIb,EAAI,EAAGA,EAzFN,EAyFiBA,IAAK,CAC9B,IAAIC,EAAOrB,EAAMY,EAAIQ,GAAGV,UACxBuB,EAAIX,KAAKC,SAASF,G,CAGpBY,EAAMA,EAAIT,QAAQC,GAAQA,IAC1B,IAAIC,EA/FM,EA+FoBO,EAAIxB,OAC9ByB,EAASN,MAAMF,GAAiBG,KAAK,GAAGC,OAAOG,GAEnD,IAAK,IAAIb,EAAI,EAAGA,EAlGN,EAkGiBA,IACzBpB,EAAMY,EAAIQ,GAAGV,UAAYwB,EAAOd,E,EAKtC,SAASe,IAEP,IAAK,IAAIvB,EAAI,EAAGA,EAzGFC,GAyGiBD,GA1GnB,EA0G+B,CAEzC,IAAIqB,EAAM,GACV,IAAK,IAAIb,EAAI,EAAGA,EA7GN,EA6GiBA,IAAK,CAC9B,IAAIC,EAAOrB,EAAMY,EAAIQ,GAAGV,UACxBuB,EAAIX,KAAKC,SAASF,G,CAGpBY,EAAMA,EAAIT,QAAQC,GAAQA,IAC1B,IAAIC,EAnHM,EAmHoBO,EAAIxB,OAC9ByB,EAASD,EAAIH,OAAOF,MAAMF,GAAiBG,KAAK,IAEpD,IAAK,IAAIT,EAAI,EAAGA,EAtHN,EAsHiBA,IACzBpB,EAAMY,EAAIQ,GAAGV,UAAYwB,EAAOd,E,EAOtC,SAASgB,IACP,IAAK,IAAIxB,EAAI,EAAGA,EA/HJ,EA+HeA,IACzB,IAAK,IAAIQ,EAAI,EAAGA,EAAIP,EAAWO,IAAK,CAClC,IAAIiB,EAjII,EAiIYzB,EAAIQ,EACxB,GAAIpB,EAAMqC,GAAO3B,YAAcV,EAAMqC,EAAQ,GAAG3B,UAAW,CACzD,IAAI4B,EAAQf,SAASvB,EAAMqC,GAAO3B,WAAaa,SAASvB,EAAMqC,EAAQ,GAAG3B,WACzEV,EAAMqC,GAAO3B,UAAY4B,EACzBtC,EAAMqC,EAAQ,GAAG3B,UAAY,EAC7B6B,EAAaD,E,EAInBE,G,CAIF,SAASC,IACP,IAAK,IAAI7B,EAAI,EAAGA,EA/IJ,EA+IeA,IACzB,IAAK,IAAIQ,EAAI,EAAGA,EAAIP,EAAWO,IAAK,CAClC,IAAIiB,EAjJI,EAiJIjB,EAAYR,EACxB,GAAIZ,EAAMqC,GAAO3B,YAAcV,EAAMqC,EAlJ7B,GAkJ4C3B,UAAW,CAC7D,IAAI4B,EAAQf,SAASvB,EAAMqC,GAAO3B,WAAaa,SAASvB,EAAMqC,EAnJxD,GAmJuE3B,WAC7EV,EAAMqC,GAAO3B,UAAY4B,EACzBtC,EAAMqC,EArJA,GAqJe3B,UAAY,EACjC6B,EAAaD,E,EAInBE,G,CAIF,SAASD,EAAaG,GACpBzC,GAAgByC,EAChB7C,EAAoBa,UAAYT,EAC5BA,EAAesB,SAASrB,KAC1ByC,aAAa1C,GACbF,EAAiBW,UAAYT,E,CAkDjC,SAASuC,IACP,IAAK,IAAI5B,EAAI,EAAGA,EArNFC,GAqNiBD,IACH,MAAtBZ,EAAMY,GAAGF,YACXI,MAAM,kCAAoCb,GAC1Cc,I,CAoBN,SAASA,IAQPf,EAAM4C,SAASvB,IACbA,EAAKX,UAAY,GACjBW,EAAKwB,aAAa,cAAe,EAAjCxB,IAEFpB,EAAe,EACfJ,EAAoBa,UAAY,EAXhCO,IACA6B,G,CAcF,SAASA,IACP,IAAK,IAAIlC,EAAI,EAAGA,EA9PFC,GA8PiBD,IAAK,CAElC,OADaZ,EAAMY,GAAGF,WAEpB,IAAK,GACL,IAAK,IACHV,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGmC,MAAME,OAAS,qBACxBjD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,IACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,IACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,IACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,KACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,KACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,KACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,MACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,MACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,MACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,OACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,GACrC,MACF,IAAK,OACH7C,EAAMY,GAAGmC,MAAMC,gBAAkB,UACjChD,EAAMY,GAAGiC,aAAa,cAAe,G,GA3S7C,WACE,IAAK,IAAIjC,EAAI,EAAGA,EAPFC,GAOiBD,IAAK,CAClC,IAAIS,EAAO1B,SAASuD,cAAc,OAClC7B,EAAK8B,UAAUC,IAAI,QACnB/B,EAAKwB,aAAa,aAAcjC,GAChCS,EAAKwB,aAAa,cAAe,GACjC7C,EAAMU,UAAY,EAClBhB,EAAU2D,YAAYhC,GACtBrB,EAAMsB,KAAKD,E,EA0SfiC,GACArC,IACA6B,IACA/C,EAAiBW,UAAYR,EAG7BP,SAAS4D,iBAAiB,SAvJ1B,SAAiBC,GACG,KAAdA,EAAEC,SAYNtB,IACAC,IACAD,IACAlB,IACA6B,KAdyB,KAAdU,EAAEC,SA0Bb1B,IACAU,IACAV,IACAd,IACA6B,KA5ByB,KAAdU,EAAEC,SAgBbzB,IACAI,IACAJ,IACAf,IACA6B,KAlByB,KAAdU,EAAEC,UA8BbvC,IACAuB,IACAvB,IACAD,IACA6B,I,IAiHanD,SAASG,eAAe,WAChC4D,QAAU,WACf3C,G","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector(\".game-board\");\nconst currentScoreDisplay = document.getElementById(\"current-score\");\nconst bestScoreDisplay = document.getElementById(\"best-score\");\nconst WIDTH = 6;\nlet totalCell = WIDTH * WIDTH;\nlet cells = [];\nlet currentScore = 0;\nlet bestScore = getBestScore() === null ? 0 : getBestScore();\n\n// create and add cells to the board\nfunction createBoard() {\n  for (let i = 0; i < totalCell; i++) {\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.setAttribute(\"data-index\", i);\n    cell.setAttribute(\"data-digits\", 0);\n    cells.innerHTML = 0;\n    gameBoard.appendChild(cell);\n    cells.push(cell);\n  }\n}\n\n// generate number (2 or 4) at a random available cell\nfunction generateNewTile() {\n  const rand = Math.floor(Math.random() * cells.length);\n  if (cells[rand].innerHTML == 0) {\n    cells[rand].innerHTML = randomNumTwoOrFour();\n  } else {\n    // if a cell is already has a number, then find a new tile\n    checkLost();\n    generateNewTile();\n  }\n}\n\n// returns 2 or 4\nfunction randomNumTwoOrFour() {\n  let rand = Math.random();\n  return rand > 0.5 ? 4 : 2;\n}\n\n// this game always generates 2 tiles at once\nfunction generateTwoNewTile() {\n  generateNewTile();\n  generateNewTile();\n}\n\nfunction moveDown() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let column = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + WIDTH * j].innerHTML;\n      column.push(parseInt(cell));\n    }\n\n    column = column.filter((num) => num);\n    let emptyCellLength = WIDTH - column.length;\n    let newColumn = Array(emptyCellLength).fill(0).concat(column);\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + WIDTH * j].innerHTML = newColumn[j];\n    }\n  }\n}\n\nfunction moveUp() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let column = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + WIDTH * j].innerHTML;\n      column.push(parseInt(cell));\n    }\n\n    column = column.filter((num) => num);\n    let emptyCellLength = WIDTH - column.length;\n\n    let newColumn = column.concat(Array(emptyCellLength).fill(0));\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + WIDTH * j].innerHTML = newColumn[j];\n    }\n  }\n}\n\nfunction moveRight() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let row = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + j].innerHTML;\n      row.push(parseInt(cell));\n    }\n\n    row = row.filter((num) => num);\n    let emptyCellLength = WIDTH - row.length;\n    let newRow = Array(emptyCellLength).fill(0).concat(row);\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + j].innerHTML = newRow[j];\n    }\n  }\n}\n\nfunction moveLeft() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    // rearrange column, making no empty cell sits between cells with numbers\n    let row = [];\n    for (let j = 0; j < WIDTH; j++) {\n      let cell = cells[i + j].innerHTML;\n      row.push(parseInt(cell));\n    }\n\n    row = row.filter((num) => num);\n    let emptyCellLength = WIDTH - row.length;\n    let newRow = row.concat(Array(emptyCellLength).fill(0));\n\n    for (let j = 0; j < WIDTH; j++) {\n      cells[i + j].innerHTML = newRow[j];\n    }\n  }\n}\n\n// merge cells and check win state when merge are all set\n// merge cells when user acts in right or left direction\nfunction mergeHorizontal() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = WIDTH * i + j;\n      if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + 1].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// merge cells when tiles move in the up or down direction\nfunction mergeVertical() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = j * WIDTH + i;\n      if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + WIDTH].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// update the current and best score\nfunction updateScores(bonus) {\n  currentScore += bonus;\n  currentScoreDisplay.innerHTML = currentScore;\n  if (currentScore > parseInt(bestScore)) {\n    setBestScore(currentScore);\n    bestScoreDisplay.innerHTML = currentScore;\n  }\n}\n\n// bind user action with key\nfunction control(e) {\n  if (e.keyCode === 37) {\n    keyUpLeft();\n  } else if (e.keyCode === 38) {\n    keyUpUp();\n  } else if (e.keyCode === 39) {\n    keyUpRight();\n  } else if (e.keyCode === 40) {\n    keyUpDown();\n  }\n}\n\nfunction keyUpLeft() {\n  moveLeft();\n  mergeHorizontal();\n  moveLeft();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpRight() {\n  moveRight();\n  mergeHorizontal();\n  moveRight();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpUp() {\n  moveUp();\n  mergeVertical();\n  moveUp();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpDown() {\n  moveDown();\n  mergeVertical();\n  moveDown();\n  generateTwoNewTile();\n  addColours();\n}\n\n// a win happens when 2048 is generated\nfunction checkWin() {\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 2048) {\n      alert(\"\\t\\t You win! \\n Your score is \" + currentScore);\n      newGame();\n    }\n  }\n}\n\n// a loss happens when all cells are full\nfunction checkLost() {\n  let numEmptyCells = 0;\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 0) {\n      numEmptyCells++;\n    }\n  }\n  if (numEmptyCells == 0) {\n    alert(\"\\t\\t You Lost\\n Your score is \" + currentScore);\n    newGame();\n  }\n}\n\n// function start new game\nfunction newGame() {\n  resetGame();\n  generateTwoNewTile();\n  addColours();\n}\n\n// reset the cells and scores\nfunction resetGame() {\n  cells.forEach((cell) => {\n    cell.innerHTML = \"\";\n    cell.setAttribute(\"data-digits\", 0);\n  });\n  currentScore = 0;\n  currentScoreDisplay.innerHTML = 0;\n}\n\n// apply a colour and font-size based on the tile number\nfunction addColours() {\n  for (let i = 0; i < totalCell; i++) {\n    let number = cells[i].innerHTML;\n    switch (number) {\n      case \"\":\n      case \"0\":\n        cells[i].style.backgroundColor = \"#afa184\";\n        cells[i].style.colour = \"rgb(175, 161, 132)\";\n        cells[i].setAttribute(\"data-digits\", 0);\n        break;\n      case \"2\":\n        cells[i].style.backgroundColor = \"#eee4ea\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"4\":\n        cells[i].style.backgroundColor = \"#ede2c8\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"8\":\n        cells[i].style.backgroundColor = \"#f2b179\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"16\":\n        cells[i].style.backgroundColor = \"#ffceaa\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"32\":\n        cells[i].style.backgroundColor = \"#e8c083\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"64\":\n        cells[i].style.backgroundColor = \"#ffab6e\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"128\":\n        cells[i].style.backgroundColor = \"#fd9787\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"256\":\n        cells[i].style.backgroundColor = \"#eah89c\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"512\":\n        cells[i].style.backgroundColor = \"#76daff\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"1024\":\n        cells[i].style.backgroundColor = \"#beeaab\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n      case \"2048\":\n        cells[i].style.backgroundColor = \"#d7d0f0\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n    }\n  }\n}\n\n// set up the screen with a new game\ncreateBoard();\ngenerateTwoNewTile();\naddColours();\nbestScoreDisplay.innerHTML = bestScore;\n\n// accept keyboard input from the user\ndocument.addEventListener(\"keyup\", control);\n\n// allow restarting the game\nconst newBtn = document.getElementById(\"new-btn\");\nnewBtn.onclick = function () {\n  newGame();\n};\n"],"names":["gameBoard","document","querySelector","currentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","numEmptyCells","i","WIDTH","alert","newGame","checkLost","generateTwoNewTile","moveDown","column","j","cell","push","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","row","newRow","moveLeft","mergeHorizontal","index","merge","updateScores","checkWin","mergeVertical","bonus","setBestScore","forEach","setAttribute","addColours","style","backgroundColor","colour","createElement","classList","add","appendChild","createBoard","addEventListener","e","keyCode","onclick"],"version":3,"file":"index.5a2e3065.js.map"}