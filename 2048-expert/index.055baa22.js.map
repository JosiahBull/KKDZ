{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const gameBoard = document.querySelector('.game-board')\n    const WIDTH = 6\n    let cells = []\n    let totalCell = WIDTH * WIDTH\n\n    // create the game board\n    function createBoard() {\n        for (let i = 0; i < totalCell; i++) {\n            let cell = document.createElement('div')\n            cell.classList.add(\"cell\")\n            cell.setAttribute('data-index',i)\n            cells.innerHTML = 0\n            gameBoard.appendChild(cell)\n            cells.push(cell)\n        }\n        // intial 2 tiles at random place\n        generateNewTile()\n        generateNewTile()\n    }\n\n\n\n    // generate number 2 or 4 at a random cell\n    function generateNewTile() {\n        const rand =  Math.floor(Math.random() * cells.length)\n        if (cells[rand].innerHTML == 0) {\n            cells[rand].innerHTML = randomNumTwoOrFour()\n        } else {// if a cell is already have a number then find a new tile\n            generateNewTile()\n        }\n    }\n\n    // generate number 2 or 4 randomlly\n    function randomNumTwoOrFour() {\n        let rand = Math.random()\n        return (rand > 0.5) ? 4 : 2\n    }\n\n\n\n    //User actions\n    //Move vertical\n    function moveDown() {\n        // get cells of each row and update their value\n        for (let i = 0; i < 6; i++) {\n            let rowOneCell = cells[i].innerHTML\n            let rowTwoCell = cells[i + (WIDTH)].innerHTML\n            let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n            let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n            let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n            let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n            // Rearrange column making no empty cell sits between cells with numbers \n            let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n            column = column.filter(num => num)\n            let emptyCellLength = 6 - column.length\n            \n            let newColumn = Array(emptyCellLength).fill(0).concat(column)\n                    \n\n            cells[i].innerHTML = newColumn[0]\n            cells[i + (WIDTH)].innerHTML = newColumn[1]\n            cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n            cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n            cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n            cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n        }\n    }\n\n    function moveUp() {\n        // get cells of each row and update their value\n        for (let i = 0; i < 6; i++) {\n            let rowOneCell = cells[i].innerHTML\n            let rowTwoCell = cells[i + (WIDTH)].innerHTML\n            let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n            let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n            let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n            let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n            // Rearrange column making no empty cell sits between cells with numbers \n            let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n            column = column.filter(num => num)\n            let emptyCellLength = 6 - column.length\n            \n            let newColumn = column.concat(Array(emptyCellLength).fill(0))      \n\n            cells[i].innerHTML = newColumn[0]\n            cells[i + (WIDTH)].innerHTML = newColumn[1]\n            cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n            cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n            cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n            cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n        }\n    }\n    function moveRight() {\n        // get cells of each column and update their value\n        for (let i = 0; i < totalCell; i += WIDTH) {\n            let columnOneCell = cells[i].innerHTML\n            let columnTwoCell = cells[i + 1].innerHTML\n            let columnThreeCell = cells[i + 2].innerHTML\n            let columnFourCell = cells[i + 3].innerHTML\n            let columnFiveCell = cells[i + 4].innerHTML\n            let columnSixCell = cells[i + 5].innerHTML\n\n            // Rearrange row making no empty cell sits between cells with numbers \n            let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n            row = row.filter(num => num)\n            let emptyCellLength = 6 - row.length\n\n            let newRow = Array(emptyCellLength).fill(0).concat(row)\n            \n\n            cells[i].innerHTML = newRow[0]\n            cells[i + 1].innerHTML = newRow[1]\n            cells[i + 2].innerHTML = newRow[2]\n            cells[i + 3].innerHTML = newRow[3]\n            cells[i + 4].innerHTML = newRow[4]\n            cells[i + 5].innerHTML = newRow[5]\n        }\n    }\n    function moveLeft() {\n        // get cells of each column and update their value\n        for (let i = 0; i < totalCell; i += WIDTH) {\n            let columnOneCell = cells[i].innerHTML\n            let columnTwoCell = cells[i + 1].innerHTML\n            let columnThreeCell = cells[i + 2].innerHTML\n            let columnFourCell = cells[i + 3].innerHTML\n            let columnFiveCell = cells[i + 4].innerHTML\n            let columnSixCell = cells[i + 5].innerHTML\n\n            // Rearrange row making no empty cell sits between cells with numbers \n            let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n            row = row.filter(num => num)\n            let emptyCellLength = 6 - row.length\n\n            let newRow = row.concat(Array(emptyCellLength).fill(0))\n            \n\n            cells[i].innerHTML = newRow[0]\n            cells[i + 1].innerHTML = newRow[1]\n            cells[i + 2].innerHTML = newRow[2]\n            cells[i + 3].innerHTML = newRow[3]\n            cells[i + 4].innerHTML = newRow[4]\n            cells[i + 5].innerHTML = newRow[5]\n        }\n    }\n\n    function control(e) {\n        if (e.keyCode === 37) {\n            keyUpLeft()\n        } else if (e.keyCode === 38) {\n            keyUpUp()\n        } else if (e.keyCode === 39) {\n            keyUpRight()\n        } else if (e.keyCode === 40) {\n            keyUpDown()\n        } else if (e.keyCode === 16) {//when enter key is up start a new game\n            newGame()\n        }\n    }\n    \n    document.addEventListener('keyup',control)\n\n    function keyUpLeft() {\n        moveLeft()\n        generateNewTile()\n        generateNewTile()\n    }\n\n    function keyUpRight() {\n        moveRight()\n        generateNewTile()\n        generateNewTile()\n    }\n\n    function keyUpUp() {\n        moveUp()\n        generateNewTile()\n        generateNewTile()\n    }\n\n    function keyUpDown() {\n        moveDown()\n        generateNewTile()\n        generateNewTile()\n    }\n\n    //function start new game\n    function newGame() { \n        clearBoard()\n        generateNewTile()\n        generateNewTile()\n    }\n\n    //function clear Board\n    function clearBoard() {\n        cells.forEach(cell => cell.innerHTML = \"\") \n    }\n    \n    //clear board and start a new game when onclick new game button\n    document.getElementById('new-btn').onclick = newGame\n\n    //intialize board\n    createBoard()\n\n})\n\n"],"names":["document","addEventListener","gameBoard","querySelector","cells","generateNewTile","rand","Math","floor","random","length","innerHTML","newGame","forEach","cell","e","keyCode","i","WIDTH","columnOneCell","columnTwoCell","columnThreeCell","columnFourCell","columnFiveCell","columnSixCell","row","parseInt","filter","num","emptyCellLength","newRow","concat","Array","fill","moveLeft","rowOneCell","rowTwoCell","rowThreeCell","rowFourCell","rowFiveCell","rowSixCell","column","newColumn","moveUp","moveRight","moveDown","getElementById","onclick","createElement","classList","add","setAttribute","appendChild","push","createBoard"],"version":3,"file":"index.055baa22.js.map"}