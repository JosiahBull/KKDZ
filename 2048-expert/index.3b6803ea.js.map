{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector('.game-board')\nconst currentScoreDisplay = document.getElementById('current-score')\nconst bestScoreDisplay = document.getElementById('best-score')\nconst WIDTH = 6\nlet cells = []\nlet totalCell = WIDTH * WIDTH\nlet currentScore = 0\nlet bestScore = (getBestScore() === null) ? 0 : getBestScore()\n\n// create the game board\nfunction createBoard() {\n    for (let i = 0; i < totalCell; i++) {\n        let cell = document.createElement('div')\n        cell.classList.add(\"cell\")\n        cell.setAttribute('data-index', i)\n        cells.innerHTML = 0\n        gameBoard.appendChild(cell)\n        cells.push(cell)\n    }\n}\n\n\n// generate number 2 or 4 at a random cell\nfunction generateNewTile() {\n    const rand = Math.floor(Math.random() * cells.length)\n    if (cells[rand].innerHTML == 0) {\n        cells[rand].innerHTML = randomNumTwoOrFour()\n    } else {// if a cell is already have a number then find a new tile\n        checkLost()\n        generateNewTile()\n    }\n}\n\n// generate number 2 or 4 randomlly\nfunction randomNumTwoOrFour() {\n    let rand = Math.random()\n    return (rand > 0.5) ? 4 : 2\n}\n\n\n\n// User actions\n// Move vertical\nfunction moveDown() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = Array(emptyCellLength).fill(0).concat(column)\n\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\n\nfunction moveUp() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = column.concat(Array(emptyCellLength).fill(0))\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\nfunction moveRight() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = Array(emptyCellLength).fill(0).concat(row)\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\nfunction moveLeft() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = row.concat(Array(emptyCellLength).fill(0))\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\n\n// Merge Cells and check Win state when merge are all set\n// merge cells when user acts in right or left direction \nfunction mergeHorizontal() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < (WIDTH - 1); j++) {\n            let index = (WIDTH * i) + j\n            if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + 1].innerHTML = 0\n                updateScores(merge)\n            }\n        }\n    }\n    checkWin()\n}\n\n// merge cells when user acts in up and down direction\nfunction mergeVertical() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < WIDTH - 1; j++) {\n            let index = (j * WIDTH) + i\n            if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + WIDTH].innerHTML = 0\n                updateScores(merge)\n            }\n        }\n    }\n    checkWin()\n}\n\n\n// update the current and best score\nfunction updateScores(bonus) {\n    currentScore += bonus\n    currentScoreDisplay.innerHTML = currentScore\n    if (currentScore > parseInt(bestScore)) {// if current score is greater then update best score\n        setBestScore(currentScore)\n        bestScoreDisplay.innerHTML = currentScore\n    }\n}\n\n// bind user action with key\nfunction control(e) {\n    if (e.keyCode === 37) {\n        keyUpLeft()\n    } else if (e.keyCode === 38) {\n        keyUpUp()\n    } else if (e.keyCode === 39) {\n        keyUpRight()\n    } else if (e.keyCode === 40) {\n        keyUpDown()\n    } else if (e.keyCode === 16) {// when enter key is up start a new game\n        newGame()\n    }\n}\n\ndocument.addEventListener('keyup', control)\n\nfunction keyUpLeft() {\n    moveLeft()\n    mergeHorizontal()\n    moveLeft()\n    generateNewTile()\n    generateNewTile()\n\n}\n\nfunction keyUpRight() {\n    moveRight()\n    mergeHorizontal()\n    moveRight()\n    generateNewTile()\n    generateNewTile()\n}\n\nfunction keyUpUp() {\n    moveUp()\n    mergeVertical()\n    moveUp()\n    generateNewTile()\n    generateNewTile()\n}\n\nfunction keyUpDown() {\n    moveDown()\n    mergeVertical()\n    moveDown()\n    generateNewTile()\n    generateNewTile()\n}\n\n// check Win condition when 2048 is generated\nfunction checkWin() {\n    for (let i = 0; i < totalCell; i++) {\n        if (cells[i].innerHTML == 2048) {\n            alert(\"\\t\\t You win! \\n Your score is \" + currentScore)\n            newGame()\n        }\n    }\n}\n\n// check lost if all cells are not empty\nfunction checkLost() {\n    let numEmptyCells = 0\n    for (let i = 0; i < totalCell; i++) {\n        if (cells[i].innerHTML == 0) {\n            numEmptyCells++\n        }\n    }\n    if (numEmptyCells == 0) {\n        alert(\"\\t\\t You Lost\\n Your score is \" + currentScore)\n        newGame()\n    }\n}\n\n// function start new game\nfunction newGame() {\n    clearBoard()\n    generateNewTile()\n    generateNewTile()\n}\n\n// Reset Current Score and reset all values to 0\nfunction clearBoard() {\n    cells.forEach(cell => cell.innerHTML = \"\")\n    currentScore = 0\n    currentScoreDisplay.innerHTML = 0\n}\n\n\n// Start game with intialize board and generate 2 tiles at random place\ncreateBoard()\ngenerateNewTile()\ngenerateNewTile()\nbestScoreDisplay.innerHTML = bestScore\n\n\n// clear board and start a new game when onclick new game button\nconst newBtn = document.getElementById('new-btn')\nnewBtn.onclick = function () {\n    newGame()\n}"],"names":["gameBoard","document","querySelector","currentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","numEmptyCells","i","WIDTH","alert","newGame","checkLost","moveDown","rowOneCell","rowTwoCell","rowThreeCell","rowFourCell","rowFiveCell","rowSixCell","column","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","columnOneCell","columnTwoCell","columnThreeCell","columnFourCell","columnFiveCell","columnSixCell","row","newRow","moveLeft","mergeHorizontal","j","index","merge","updateScores","checkWin","mergeVertical","bonus","setBestScore","forEach","cell","addEventListener","e","keyCode","createElement","classList","add","setAttribute","appendChild","push","createBoard","onclick"],"version":3,"file":"index.3b6803ea.js.map"}