{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector('.game-board')\nconst currentScoreDisplay = document.getElementById('current-score')\nconst bestScoreDisplay = document.getElementById('best-score')\nconst WIDTH = 6\nlet cells = []\nlet totalCell = WIDTH * WIDTH\nlet currentScore = 0\nlet bestScore = (getBestScore() === null) ? 0 : getBestScore()\n\n// create the game board\nfunction createBoard() {\n    for (let i = 0; i < totalCell; i++) {\n        let cell = document.createElement('div')\n        cell.classList.add(\"cell\")\n        cell.setAttribute('data-index', i)\n        cell.setAttribute('data-digits', 0)\n        cells.innerHTML = 0\n        gameBoard.appendChild(cell)\n        cells.push(cell)\n    }\n}\n\n// generate number 2 or 4 at a random cell\nfunction generateNewTile() {\n    const rand = Math.floor(Math.random() * cells.length)\n    if (cells[rand].innerHTML == 0) {\n        cells[rand].innerHTML = randomNumTwoOrFour()\n    } else {// if a cell is already have a number then find a new tile\n        checkLost()\n        generateNewTile()\n    }\n}\n\n// generate number 2 or 4 randomlly\nfunction randomNumTwoOrFour() {\n    let rand = Math.random()\n    return (rand > 0.5) ? 4 : 2\n}\n\n// generate two new tile at once\nfunction generateTwoNewTile() {\n    generateNewTile()\n    generateNewTile()\n}\n\n\n\n// User actions\n// Move vertical\nfunction moveDown() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = Array(emptyCellLength).fill(0).concat(column)\n\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\n\nfunction moveUp() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = column.concat(Array(emptyCellLength).fill(0))\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\nfunction moveRight() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = Array(emptyCellLength).fill(0).concat(row)\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\nfunction moveLeft() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = row.concat(Array(emptyCellLength).fill(0))\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\n\n// Merge Cells and check Win state when merge are all set\n// merge cells when user acts in right or left direction \nfunction mergeHorizontal() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < (WIDTH - 1); j++) {\n            let index = (WIDTH * i) + j\n            if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + 1].innerHTML = 0\n                updateScores(merge)\n            }\n        }\n    }\n    checkWin()\n}\n\n// merge cells when user acts in up and down direction\nfunction mergeVertical() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < WIDTH - 1; j++) {\n            let index = (j * WIDTH) + i\n            if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + WIDTH].innerHTML = 0\n                updateScores(merge)\n            }\n        }\n    }\n    checkWin()\n}\n\n\n// update the current and best score\nfunction updateScores(bonus) {\n    currentScore += bonus\n    currentScoreDisplay.innerHTML = currentScore\n    if (currentScore > parseInt(bestScore)) {// if current score is greater then update best score\n        setBestScore(currentScore)\n        bestScoreDisplay.innerHTML = currentScore\n    }\n}\n\n// bind user action with key\nfunction control(e) {\n    if (e.keyCode === 37) {\n        keyUpLeft()\n    } else if (e.keyCode === 38) {\n        keyUpUp()\n    } else if (e.keyCode === 39) {\n        keyUpRight()\n    } else if (e.keyCode === 40) {\n        keyUpDown()\n    } else if (e.keyCode === 16) {// when enter key is up start a new game\n        newGame()\n    }\n}\n\ndocument.addEventListener('keyup', control)\n\nfunction keyUpLeft() {\n    moveLeft()\n    mergeHorizontal()\n    moveLeft()\n    generateTwoNewTile()\n    addColours()\n\n}\n\nfunction keyUpRight() {\n    moveRight()\n    mergeHorizontal()\n    moveRight()\n    generateTwoNewTile()\n    addColours()\n}\n\nfunction keyUpUp() {\n    moveUp()\n    mergeVertical()\n    moveUp()\n    generateTwoNewTile()\n    addColours()\n}\n\nfunction keyUpDown() {\n    moveDown()\n    mergeVertical()\n    moveDown()\n    generateTwoNewTile()\n    addColours()\n}\n\n\n// check Win condition when 2048 is generated\nfunction checkWin() {\n    for (let i = 0; i < totalCell; i++) {\n        if (cells[i].innerHTML == 2048) {\n            alert(\"\\t\\t You win! \\n Your score is \" + currentScore)\n            newGame()\n        }\n    }\n}\n\n// check lost if all cells are not empty\nfunction checkLost() {\n    let numEmptyCells = 0\n    for (let i = 0; i < totalCell; i++) {\n        if (cells[i].innerHTML == 0) {\n            numEmptyCells++\n        }\n    }\n    if (numEmptyCells == 0) {\n        alert(\"\\t\\t You Lost\\n Your score is \" + currentScore)\n        newGame()\n    }\n}\n\n// function start new game\nfunction newGame() {\n    resetGame()\n    generateTwoNewTile()\n    addColours()\n}\n\n\n// Reset the cells and scores\nfunction resetGame() {\n    cells.forEach(cell => {\n        cell.innerHTML = \"\"\n        cell.setAttribute('data-digits', 0)\n    })\n    currentScore = 0\n    currentScoreDisplay.innerHTML = 0\n}\n\n// Add colour \nfunction addColours() {\n    for (let i = 0; i < totalCell; i++) {\n        let number = cells[i].innerHTML\n        switch (number) {\n            case \"\":\n            case \"0\":\n                cells[i].style.backgroundColor = '#afa184'\n                cells[i].setAttribute('data-digits', 1)\n                break;\n            case \"2\":\n                cells[i].style.backgroundColor = '#eee4ea'\n                cells[i].setAttribute('data-digits', 1)\n                break;\n            case \"4\":\n                cells[i].style.backgroundColor = '#ede2c8'\n                cells[i].setAttribute('data-digits', 1)\n                break;\n            case \"8\":\n                cells[i].style.backgroundColor = '#f2b179'\n                cells[i].setAttribute('data-digits', 1)\n                break;\n            case \"16\":\n                cells[i].style.backgroundColor = '#ffceaa'\n                cells[i].setAttribute('data-digits', 2)\n                break;\n            case \"32\":\n                cells[i].style.backgroundColor = '#e8c083'\n                cells[i].setAttribute('data-digits', 2)\n                break;\n            case \"64\":\n                cells[i].style.backgroundColor = '#ffab6e'\n                cells[i].setAttribute('data-digits', 2)\n                break;\n            case \"128\":\n                cells[i].style.backgroundColor = '#fd9787'\n                cells[i].setAttribute('data-digits', 3)\n                break;\n            case \"256\":\n                cells[i].style.backgroundColor = '#eah89c'\n                cells[i].setAttribute('data-digits', 3)\n                break;\n            case \"512\":\n                cells[i].style.backgroundColor = '#76daff'\n                cells[i].setAttribute('data-digits', 3)\n                break\n            case \"1024\":\n                cells[i].style.backgroundColor = '#beeaab'\n                cells[i].setAttribute('data-digits', 4)\n                break;\n            case \"2048\":\n                cells[i].style.backgroundColor = '#d7d0f0'\n                cells[i].setAttribute('data-digits', 4)\n                break;\n        }\n    }\n}\n\n\n\n// Start game with intialize board and generate 2 tiles at random place\ncreateBoard()\ngenerateTwoNewTile()\naddColours()\nbestScoreDisplay.innerHTML = bestScore\n\n\n\n// clear board and start a new game when onclick new game button\nconst newBtn = document.getElementById('new-btn')\nnewBtn.onclick = function () {\n    newGame()\n}"],"names":["gameBoard","document","querySelector","currentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","numEmptyCells","i","WIDTH","alert","newGame","checkLost","generateTwoNewTile","moveDown","rowOneCell","rowTwoCell","rowThreeCell","rowFourCell","rowFiveCell","rowSixCell","column","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","columnOneCell","columnTwoCell","columnThreeCell","columnFourCell","columnFiveCell","columnSixCell","row","newRow","moveLeft","mergeHorizontal","j","index","merge","updateScores","checkWin","mergeVertical","bonus","setBestScore","forEach","cell","setAttribute","addColours","style","backgroundColor","addEventListener","e","keyCode","createElement","classList","add","appendChild","push","createBoard","onclick"],"version":3,"file":"index.460a05fa.js.map"}