{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector('.game-board')\nconst ccurrentScoreDisplay  = document.getElementById('current-score')\nconst bestScoreDisplay = document.getElementById('best-score')\nconst WIDTH = 6\nlet cells = []\nlet totalCell = WIDTH * WIDTH\nlet currentScore = 0\nlet bestScore = (getBestScore() === null) ? 0 : getBestScore()\n\n// create the game board\nfunction createBoard() {\n    for (let i = 0; i < totalCell; i++) {\n        let cell = document.createElement('div')\n        cell.classList.add(\"cell\")\n        cell.setAttribute('data-index', i)\n        cells.innerHTML = 0\n        gameBoard.appendChild(cell)\n        cells.push(cell)\n    }\n    // intial 2 tiles at random place\n    generateNewTile()\n    generateNewTile()\n    bestScoreDisplay.innerHTML = bestScore\n}\n\n\n// generate number 2 or 4 at a random cell\nfunction generateNewTile() {\n    const rand = Math.floor(Math.random() * cells.length)\n    if (cells[rand].innerHTML == 0) {\n        cells[rand].innerHTML = randomNumTwoOrFour()\n    } else {// if a cell is already have a number then find a new tile\n        generateNewTile()\n    }\n}\n\n// generate number 2 or 4 randomlly\nfunction randomNumTwoOrFour() {\n    let rand = Math.random()\n    return (rand > 0.5) ? 4 : 2\n}\n\n\n\n// User actions\n// Move vertical\nfunction moveDown() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = Array(emptyCellLength).fill(0).concat(column)\n\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\n\nfunction moveUp() {\n    // get cells of each row and update their value\n    for (let i = 0; i < 6; i++) {\n        let rowOneCell = cells[i].innerHTML\n        let rowTwoCell = cells[i + (WIDTH)].innerHTML\n        let rowThreeCell = cells[i + (WIDTH * 2)].innerHTML\n        let rowFourCell = cells[i + (WIDTH * 3)].innerHTML\n        let rowFiveCell = cells[i + (WIDTH * 4)].innerHTML\n        let rowSixCell = cells[i + (WIDTH * 5)].innerHTML\n\n        // Rearrange column making no empty cell sits between cells with numbers \n        let column = [parseInt(rowOneCell), parseInt(rowTwoCell), parseInt(rowThreeCell), parseInt(rowFourCell), parseInt(rowFiveCell), parseInt(rowSixCell)]\n        column = column.filter(num => num)\n        let emptyCellLength = 6 - column.length\n\n        let newColumn = column.concat(Array(emptyCellLength).fill(0))\n\n        cells[i].innerHTML = newColumn[0]\n        cells[i + (WIDTH)].innerHTML = newColumn[1]\n        cells[i + (WIDTH * 2)].innerHTML = newColumn[2]\n        cells[i + (WIDTH * 3)].innerHTML = newColumn[3]\n        cells[i + (WIDTH * 4)].innerHTML = newColumn[4]\n        cells[i + (WIDTH * 5)].innerHTML = newColumn[5]\n    }\n}\nfunction moveRight() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = Array(emptyCellLength).fill(0).concat(row)\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\nfunction moveLeft() {\n    // get cells of each column and update their value\n    for (let i = 0; i < totalCell; i += WIDTH) {\n        let columnOneCell = cells[i].innerHTML\n        let columnTwoCell = cells[i + 1].innerHTML\n        let columnThreeCell = cells[i + 2].innerHTML\n        let columnFourCell = cells[i + 3].innerHTML\n        let columnFiveCell = cells[i + 4].innerHTML\n        let columnSixCell = cells[i + 5].innerHTML\n\n        // Rearrange row making no empty cell sits between cells with numbers \n        let row = [parseInt(columnOneCell), parseInt(columnTwoCell), parseInt(columnThreeCell), parseInt(columnFourCell), parseInt(columnFiveCell), parseInt(columnSixCell)]\n        row = row.filter(num => num)\n        let emptyCellLength = 6 - row.length\n\n        let newRow = row.concat(Array(emptyCellLength).fill(0))\n\n\n        cells[i].innerHTML = newRow[0]\n        cells[i + 1].innerHTML = newRow[1]\n        cells[i + 2].innerHTML = newRow[2]\n        cells[i + 3].innerHTML = newRow[3]\n        cells[i + 4].innerHTML = newRow[4]\n        cells[i + 5].innerHTML = newRow[5]\n    }\n}\n\n// Merge Cells\n// merge cells when user acts in right or left direction \nfunction mergeHorizontal() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < (WIDTH - 1); j++) {\n            let index = (WIDTH * i) + j\n            if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + 1].innerHTML = 0\n                updateScore(merge)\n            }\n        }\n    }\n}\n\n// merge cells when user acts in up and down direction\nfunction mergeVertical() {\n    for (let i = 0; i < WIDTH; i++) {\n        for (let j = 0; j < WIDTH - 1; j++) {\n            let index = (j * WIDTH) + i\n            if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n                let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML)\n                cells[index].innerHTML = merge\n                cells[index + WIDTH].innerHTML = 0\n                updateScore(merge)\n            }\n        }\n    }\n}\n\n\n// update the current score\nfunction updateScore(bonus) {\n    currentScore += bonus\n    ccurrentScoreDisplay .innerHTML = currentScore\n    if (currentScore > parseInt(bestScore)) {// if current score is greater then update best score\n        setBestScore(currentScore)\n        bestScoreDisplay.innerHTML = currentScore\n    }\n}\n\n// bind user action with key\nfunction control(e) {\n    if (e.keyCode === 37) {\n        keyUpLeft()\n    } else if (e.keyCode === 38) {\n        keyUpUp()\n    } else if (e.keyCode === 39) {\n        keyUpRight()\n    } else if (e.keyCode === 40) {\n        keyUpDown()\n    } else if (e.keyCode === 16) {// when enter key is up start a new game\n        newGame()\n    }\n}\n\ndocument.addEventListener('keyup', control)\n\nfunction keyUpLeft() {\n    moveLeft()\n    mergeHorizontal()\n    moveLeft()\n    generateNewTile()\n    generateNewTile()\n\n}\n\nfunction keyUpRight() {\n    moveRight()\n    mergeHorizontal()\n    moveRight()\n    generateNewTile()\n    generateNewTile()\n}\n\nfunction keyUpUp() {\n    moveUp()\n    mergeVertical()\n    moveUp()\n    generateNewTile()\n    generateNewTile()\n}\n\nfunction keyUpDown() {\n    moveDown()\n    mergeVertical()\n    moveDown()\n    generateNewTile()\n    generateNewTile()\n}\n\n//function start new game\nfunction newGame() {\n    clearBoard()\n    generateNewTile()\n    generateNewTile()\n}\n\n//function clear Board\nfunction clearBoard() {\n    cells.forEach(cell => cell.innerHTML = \"\")\n    currentScore = 0\n    ccurrentScoreDisplay .innerHTML = 0\n}\n\n//intialize board\ncreateBoard()\n\n\n// clear board and start a new game when onclick new game button\nconst newBtn = document.getElementById('new-btn')\nnewBtn.onclick = function () {\n    newGame()\n}"],"names":["gameBoard","document","querySelector","ccurrentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","moveDown","i","rowOneCell","rowTwoCell","rowThreeCell","WIDTH","rowFourCell","rowFiveCell","rowSixCell","column","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","columnOneCell","columnTwoCell","columnThreeCell","columnFourCell","columnFiveCell","columnSixCell","row","newRow","moveLeft","mergeHorizontal","j","index","merge","updateScore","mergeVertical","bonus","setBestScore","newGame","forEach","cell","addEventListener","e","keyCode","createElement","classList","add","setAttribute","appendChild","push","createBoard","onclick"],"version":3,"file":"index.7626d525.js.map"}