{"mappings":"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","sources":["src/2048-expert/index.js"],"sourcesContent":["const gameBoard = document.querySelector(\".game-board\");\nconst currentScoreDisplay = document.getElementById(\"current-score\");\nconst bestScoreDisplay = document.getElementById(\"best-score\");\nconst WIDTH = 6;\nlet totalCell = WIDTH * WIDTH;\nlet cells = [];\nlet currentScore = 0;\nlet bestScore = getBestScore() === null ? 0 : getBestScore();\n\n// create and add cells to the board\nfunction createBoard() {\n  for (let i = 0; i < totalCell; i++) {\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.setAttribute(\"data-index\", i);\n    cell.setAttribute(\"data-digits\", 0);\n    cells.innerHTML = 0;\n    gameBoard.appendChild(cell);\n    cells.push(cell);\n  }\n}\n\n// generate number (2 or 4) at a random available cell\nfunction generateNewTile() {\n  const rand = Math.floor(Math.random() * cells.length);\n  if (cells[rand].innerHTML == 0) {\n    cells[rand].innerHTML = randomNumTwoOrFour();\n  } else {\n    // if a cell is already has a number, then find a new tile\n    checkLost();\n    generateNewTile();\n  }\n}\n\n// returns 2 or 4\nfunction randomNumTwoOrFour() {\n  let rand = Math.random();\n  return rand > 0.5 ? 4 : 2;\n}\n\n// this game always generates 2 tiles at once\nfunction generateTwoNewTile() {\n  generateNewTile();\n  generateNewTile();\n}\n\nfunction moveDown() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    let rowOneCell = cells[i].innerHTML;\n    let rowTwoCell = cells[i + WIDTH].innerHTML;\n    let rowThreeCell = cells[i + WIDTH * 2].innerHTML;\n    let rowFourCell = cells[i + WIDTH * 3].innerHTML;\n    let rowFiveCell = cells[i + WIDTH * 4].innerHTML;\n    let rowSixCell = cells[i + WIDTH * 5].innerHTML;\n\n    // rearrange column, making no empty cell sits between cells with numbers\n    let column = [\n      parseInt(rowOneCell),\n      parseInt(rowTwoCell),\n      parseInt(rowThreeCell),\n      parseInt(rowFourCell),\n      parseInt(rowFiveCell),\n      parseInt(rowSixCell),\n    ];\n    column = column.filter((num) => num);\n    let emptyCellLength = 6 - column.length;\n\n    let newColumn = Array(emptyCellLength).fill(0).concat(column);\n\n    cells[i].innerHTML = newColumn[0];\n    cells[i + WIDTH].innerHTML = newColumn[1];\n    cells[i + WIDTH * 2].innerHTML = newColumn[2];\n    cells[i + WIDTH * 3].innerHTML = newColumn[3];\n    cells[i + WIDTH * 4].innerHTML = newColumn[4];\n    cells[i + WIDTH * 5].innerHTML = newColumn[5];\n  }\n}\n\nfunction moveUp() {\n  // get cells of each row and update their value\n  for (let i = 0; i < WIDTH; i++) {\n    let rowOneCell = cells[i].innerHTML;\n    let rowTwoCell = cells[i + WIDTH].innerHTML;\n    let rowThreeCell = cells[i + WIDTH * 2].innerHTML;\n    let rowFourCell = cells[i + WIDTH * 3].innerHTML;\n    let rowFiveCell = cells[i + WIDTH * 4].innerHTML;\n    let rowSixCell = cells[i + WIDTH * 5].innerHTML;\n\n    // rearrange column making no empty cell sits between cells with numbers\n    let column = [\n      parseInt(rowOneCell),\n      parseInt(rowTwoCell),\n      parseInt(rowThreeCell),\n      parseInt(rowFourCell),\n      parseInt(rowFiveCell),\n      parseInt(rowSixCell),\n    ];\n    column = column.filter((num) => num);\n    let emptyCellLength = 6 - column.length;\n\n    let newColumn = column.concat(Array(emptyCellLength).fill(0));\n\n    cells[i].innerHTML = newColumn[0];\n    cells[i + WIDTH].innerHTML = newColumn[1];\n    cells[i + WIDTH * 2].innerHTML = newColumn[2];\n    cells[i + WIDTH * 3].innerHTML = newColumn[3];\n    cells[i + WIDTH * 4].innerHTML = newColumn[4];\n    cells[i + WIDTH * 5].innerHTML = newColumn[5];\n  }\n}\nfunction moveRight() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    let columnOneCell = cells[i].innerHTML;\n    let columnTwoCell = cells[i + 1].innerHTML;\n    let columnThreeCell = cells[i + 2].innerHTML;\n    let columnFourCell = cells[i + 3].innerHTML;\n    let columnFiveCell = cells[i + 4].innerHTML;\n    let columnSixCell = cells[i + 5].innerHTML;\n\n    // rearrange row making no empty cell sits between cells with numbers\n    let row = [\n      parseInt(columnOneCell),\n      parseInt(columnTwoCell),\n      parseInt(columnThreeCell),\n      parseInt(columnFourCell),\n      parseInt(columnFiveCell),\n      parseInt(columnSixCell),\n    ];\n    row = row.filter((num) => num);\n    let emptyCellLength = 6 - row.length;\n\n    let newRow = Array(emptyCellLength).fill(0).concat(row);\n\n    cells[i].innerHTML = newRow[0];\n    cells[i + 1].innerHTML = newRow[1];\n    cells[i + 2].innerHTML = newRow[2];\n    cells[i + 3].innerHTML = newRow[3];\n    cells[i + 4].innerHTML = newRow[4];\n    cells[i + 5].innerHTML = newRow[5];\n  }\n}\nfunction moveLeft() {\n  // get cells of each column and update their value\n  for (let i = 0; i < totalCell; i += WIDTH) {\n    let columnOneCell = cells[i].innerHTML;\n    let columnTwoCell = cells[i + 1].innerHTML;\n    let columnThreeCell = cells[i + 2].innerHTML;\n    let columnFourCell = cells[i + 3].innerHTML;\n    let columnFiveCell = cells[i + 4].innerHTML;\n    let columnSixCell = cells[i + 5].innerHTML;\n\n    // rearrange row making no empty cell sits between cells with numbers\n    let row = [\n      parseInt(columnOneCell),\n      parseInt(columnTwoCell),\n      parseInt(columnThreeCell),\n      parseInt(columnFourCell),\n      parseInt(columnFiveCell),\n      parseInt(columnSixCell),\n    ];\n    row = row.filter((num) => num);\n    let emptyCellLength = 6 - row.length;\n\n    let newRow = row.concat(Array(emptyCellLength).fill(0));\n\n    cells[i].innerHTML = newRow[0];\n    cells[i + 1].innerHTML = newRow[1];\n    cells[i + 2].innerHTML = newRow[2];\n    cells[i + 3].innerHTML = newRow[3];\n    cells[i + 4].innerHTML = newRow[4];\n    cells[i + 5].innerHTML = newRow[5];\n  }\n}\n\n// merge cells and check win state when merge are all set\n// merge cells when user acts in right or left direction\nfunction mergeHorizontal() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = WIDTH * i + j;\n      if (cells[index].innerHTML === cells[index + 1].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + 1].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + 1].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// merge cells when tiles move in the up or down direction\nfunction mergeVertical() {\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH - 1; j++) {\n      let index = j * WIDTH + i;\n      if (cells[index].innerHTML === cells[index + WIDTH].innerHTML) {\n        let merge = parseInt(cells[index].innerHTML) + parseInt(cells[index + WIDTH].innerHTML);\n        cells[index].innerHTML = merge;\n        cells[index + WIDTH].innerHTML = 0;\n        updateScores(merge);\n      }\n    }\n  }\n  checkWin();\n}\n\n// update the current and best score\nfunction updateScores(bonus) {\n  currentScore += bonus;\n  currentScoreDisplay.innerHTML = currentScore;\n  if (currentScore > parseInt(bestScore)) {\n    setBestScore(currentScore);\n    bestScoreDisplay.innerHTML = currentScore;\n  }\n}\n\n// bind user action with key\nfunction control(e) {\n  if (e.keyCode === 37) {\n    keyUpLeft();\n  } else if (e.keyCode === 38) {\n    keyUpUp();\n  } else if (e.keyCode === 39) {\n    keyUpRight();\n  } else if (e.keyCode === 40) {\n    keyUpDown();\n  }\n}\n\nfunction keyUpLeft() {\n  moveLeft();\n  mergeHorizontal();\n  moveLeft();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpRight() {\n  moveRight();\n  mergeHorizontal();\n  moveRight();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpUp() {\n  moveUp();\n  mergeVertical();\n  moveUp();\n  generateTwoNewTile();\n  addColours();\n}\n\nfunction keyUpDown() {\n  moveDown();\n  mergeVertical();\n  moveDown();\n  generateTwoNewTile();\n  addColours();\n}\n\n// a win happens when 2048 is generated\nfunction checkWin() {\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 2048) {\n      alert(\"\\t\\t You win! \\n Your score is \" + currentScore);\n      newGame();\n    }\n  }\n}\n\n// a loss happens when all cells are full\nfunction checkLost() {\n  let numEmptyCells = 0;\n  for (let i = 0; i < totalCell; i++) {\n    if (cells[i].innerHTML == 0) {\n      numEmptyCells++;\n    }\n  }\n  if (numEmptyCells == 0) {\n    alert(\"\\t\\t You Lost\\n Your score is \" + currentScore);\n    newGame();\n  }\n}\n\n// function start new game\nfunction newGame() {\n  resetGame();\n  generateTwoNewTile();\n  addColours();\n}\n\n// reset the cells and scores\nfunction resetGame() {\n  cells.forEach((cell) => {\n    cell.innerHTML = \"\";\n    cell.setAttribute(\"data-digits\", 0);\n  });\n  currentScore = 0;\n  currentScoreDisplay.innerHTML = 0;\n}\n\n// apply a colour and font-size based on the tile number\nfunction addColours() {\n  for (let i = 0; i < totalCell; i++) {\n    let number = cells[i].innerHTML;\n    switch (number) {\n      case \"\":\n      case \"0\":\n        cells[i].style.backgroundColor = \"#afa184\";\n        cells[i].style.colour = \"rgb(175, 161, 132)\";\n        cells[i].setAttribute(\"data-digits\", 0);\n        break;\n      case \"2\":\n        cells[i].style.backgroundColor = \"#eee4ea\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"4\":\n        cells[i].style.backgroundColor = \"#ede2c8\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"8\":\n        cells[i].style.backgroundColor = \"#f2b179\";\n        cells[i].setAttribute(\"data-digits\", 1);\n        break;\n      case \"16\":\n        cells[i].style.backgroundColor = \"#ffceaa\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"32\":\n        cells[i].style.backgroundColor = \"#e8c083\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"64\":\n        cells[i].style.backgroundColor = \"#ffab6e\";\n        cells[i].setAttribute(\"data-digits\", 2);\n        break;\n      case \"128\":\n        cells[i].style.backgroundColor = \"#fd9787\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"256\":\n        cells[i].style.backgroundColor = \"#eah89c\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"512\":\n        cells[i].style.backgroundColor = \"#76daff\";\n        cells[i].setAttribute(\"data-digits\", 3);\n        break;\n      case \"1024\":\n        cells[i].style.backgroundColor = \"#beeaab\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n      case \"2048\":\n        cells[i].style.backgroundColor = \"#d7d0f0\";\n        cells[i].setAttribute(\"data-digits\", 4);\n        break;\n    }\n  }\n}\n\n// set up the screen with a new game\ncreateBoard();\ngenerateTwoNewTile();\naddColours();\nbestScoreDisplay.innerHTML = bestScore;\n\n// accept keyboard input from the user\ndocument.addEventListener(\"keyup\", control);\n\n// allow restarting the game\nconst newBtn = document.getElementById(\"new-btn\");\nnewBtn.onclick = function () {\n  newGame();\n};\n"],"names":["gameBoard","document","querySelector","currentScoreDisplay","getElementById","bestScoreDisplay","cells","currentScore","bestScore","getBestScore","generateNewTile","rand","Math","floor","random","length","innerHTML","numEmptyCells","i","WIDTH","alert","newGame","checkLost","generateTwoNewTile","moveDown","rowOneCell","rowTwoCell","rowThreeCell","rowFourCell","rowFiveCell","rowSixCell","column","parseInt","filter","num","emptyCellLength","newColumn","Array","fill","concat","moveUp","moveRight","columnOneCell","columnTwoCell","columnThreeCell","columnFourCell","columnFiveCell","columnSixCell","row","newRow","moveLeft","mergeHorizontal","j","index","merge","updateScores","checkWin","mergeVertical","bonus","setBestScore","forEach","cell","setAttribute","addColours","style","backgroundColor","colour","createElement","classList","add","appendChild","push","createBoard","addEventListener","e","keyCode","onclick"],"version":3,"file":"index.75e448d9.js.map"}