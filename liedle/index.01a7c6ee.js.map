{"mappings":"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","sources":["src/liedle/index.js"],"sourcesContent":["const dictionary = [\"stare\", \"doing\", \"lucky\", \"frame\", \"ratio\", \"ouija\", \"ready\", \"touch\"]\nconst replayBtn = document.getElementById(\"replay\")\nconst NUM_ROWS = 8\nconst NUM_COLS = 5\nlet rowIndex\nlet colIndex\nlet isEndGame\n\nreplayBtn.onclick = function () {\n\tresetGame()\n}\n\n// global variables so they can be changed from the tests\nwindow.secretWord = ''\nwindow.lieRate = 0.08\n\nfunction start() {\n\tisEndGame = false\n\tcreateGrid()\n\tresetGame()\n\thandleInput()\n}\n\nfunction resetGame() {\n\tisEndGame = false\n\trowIndex = 0\n\tcolIndex = 0\n\tresetGrid()\n\thideEndSection()\n\tpickSecretWord()\n}\n\n// hide end section containing win/lose UI components\nfunction hideEndSection() {\n\tconst endSection = document.getElementById('end')\n\tendSection.style.visibility = \"hidden\"\n}\n\n// fill the grid with empty tiles\nfunction createGrid() {\n\tconst grid = document.getElementById('grid')\n\tfor (let i = 0; i < NUM_ROWS; i++) {\n\t\tfor (let j = 0; j < NUM_COLS; j++) {\n\t\t\tgrid.appendChild(getTile(i, j))\n\t\t}\n\t}\n}\n\n// resets the text and colour of each tile\nfunction resetGrid() {\n\tfor (let i = 0; i < NUM_ROWS; i++) {\n\t\tfor (let j = 0; j < NUM_COLS; j++) {\n\t\t\tconst tile = document.querySelector(`[data-row-index=\"${i}\"][data-col-index=\"${j}\"].tile`)\n\t\t\ttile.innerHTML = \"\"\n\t\t\ttile.dataset.type = \"empty\"\n\t\t}\n\t}\n}\n\n// creates and returns an empty tile\nfunction getTile(i, j) {\n\tconst tile = document.createElement('div')\n\ttile.classList.add('tile')\n\t// HTML helpers will automatically convert camel case to dashes\n\t// hyphens are not allowed in JavScript names\n\ttile.dataset.rowIndex = i\n\ttile.dataset.colIndex = j\n\ttile.dataset.type = \"empty\"\n\treturn tile\n}\n\n// updates a tile on the grid with a letter and styling\nfunction updateTile(letter, i, j, type) {\n\t// speech marks are required when using querySelector as i & j are both numbers\n\tconst tile = document.querySelector(`[data-col-index=\"${i}\"][data-row-index=\"${j}\"].tile`)\n\ttile.innerHTML = letter\n\ttile.dataset.type = type\n}\n\n// pick a random word from the dictionary\nfunction pickSecretWord() {\n\twindow.secretWord = dictionary[Math.floor(Math.random() * dictionary.length)]\n}\n\n// handles key presses from the user\nfunction handleInput() {\n\tdocument.addEventListener(\"keydown\", function onEvent(e) {\n\t\tif (isEndGame) {\n\t\t\treturn\n\t\t}\n\n\t\tconst key = e.key\n\t\t// regex matches any lowercase or uppercase english letter\n\t\tif (key.length === 1 && e.key.match(/^[a-z]/i)) {\n\t\t\thandleLetter(key)\n\t\t} else if (e.key === \"Enter\") {\n\t\t\thandleEnter()\n\t\t} else if (e.key === \"Backspace\") {\n\t\t\thandleBackspace()\n\t\t}\n\t})\n}\n\n// add the letter to the grid if possible\nfunction handleLetter(letter) {\n\tif (colIndex > NUM_COLS - 1 || rowIndex > NUM_ROWS - 1) {\n\t\treturn\n\t}\n\n\tupdateTile(letter.toUpperCase(), colIndex, rowIndex, \"full\")\n\tcolIndex++\n}\n\n// delete and reset the last tile\nfunction handleBackspace() {\n\tif (colIndex === 0) {\n\t\treturn\n\t}\n\n\tcolIndex--\n\tupdateTile(\"\", colIndex, rowIndex, \"empty\")\n}\n\n// submit a valid word\nfunction handleEnter() {\n\tconst word = getWord()\n\tif (isValidWord(word)) {\n\t\tcolourWord(word)\n\t}\n}\n\nfunction getWord() {\n\tconst tiles = document.querySelectorAll(`[data-type=\"full\"][data-row-index=\"${rowIndex}\"].tile`)\n\tlet word = \"\"\n\tfor (const tile of tiles) {\n\t\tword += tile.innerHTML\n\t}\n\treturn word.toLowerCase()\n}\n\nfunction isValidWord(word) {\n\treturn (word.length == 5 && dictionary.includes(word));\n}\n\nfunction colourWord(word) {\n\tfor (let i = 0; i < NUM_COLS; i++) {\n\t\tconst tile = document.querySelector(`[data-row-index=\"${rowIndex}\"][data-col-index=\"${i}\"].tile`)\n\t\tif (Math.random() <= window.lieRate && word != window.secretWord) {\n\t\t\tcolourLetterFalsely(tile)\n\t\t} else {\n\t\t\tcolourLetter(tile)\n\t\t}\n\t}\n\tcheckEndGame(word)\n}\n\nfunction colourLetter(tile) {\n\tlet index = window.secretWord.indexOf(tile.innerHTML.toLowerCase())\n\tswitch (index) {\n\t\tcase -1:\n\t\t\ttile.dataset.type = \"wrong\"\n\t\t\tbreak\n\t\tcase parseInt(tile.dataset.colIndex):\n\t\t\ttile.dataset.type = \"right\"\n\t\t\tbreak\n\t\tdefault:\n\t\t\ttile.dataset.type = \"right-letter\"\n\t\t\tbreak\n\t}\n}\n\nfunction colourLetterFalsely(tile) {\n\tlet type\n\tlet index = secretWord.indexOf(tile.innerHTML.toLowerCase())\n\t// set the type to one of the incorrect types \n\tswitch (index) {\n\t\tcase -1:\n\t\t\ttype = (Math.random() < 0.5 ? \"right\" : \"right-letter\")\n\t\t\tbreak\n\t\tcase parseInt(tile.dataset.colIndex):\n\t\t\ttype = (Math.random() < 0.5 ? \"wrong\" : \"right-letter\")\n\t\t\tbreak\n\t\tdefault:\n\t\t\ttype = (Math.random() < 0.5 ? \"right\" : \"wrong\")\n\t\t\tbreak\n\t}\n\ttile.dataset.type = type\n}\n\nfunction checkEndGame(word) {\n\tif (word === secretWord) {\n\t\thandleEndGame(/*isWin =*/ true)\n\t} else if (rowIndex >= NUM_ROWS - 1) {\n\t\thandleEndGame(/*isWin =*/ false)\n\t} else {\n\t\t// reset cursor\n\t\tcolIndex = 0\n\t\trowIndex++\n\t}\n}\n\nfunction handleEndGame(isWin) {\n\tconst endSection = document.getElementById('end')\n\tconst endMsg = document.getElementById('end-message')\n\tconst wordReveal = document.getElementById('word-reveal')\n\tif (isWin) {\n\t\tendMsg.innerHTML = \"YOU WIN!\"\n\t\tendMsg.dataset.result = \"win\"\n\t} else {\n\t\tendMsg.innerHTML = \"YOU LOSE\"\n\t\tendMsg.dataset.result = \"lose\"\n\t}\n\twordReveal.innerHTML = `The secret word was ${secretWord.toUpperCase()}`\n\tendSection.style.visibility = \"visible\"\n\tisEndGame = true\n}\n\n\nstart()"],"names":["dictionary","replayBtn","document","getElementById","rowIndex","colIndex","isEndGame","resetGame","i","j","tile","querySelector","innerHTML","dataset","type","resetGrid","style","visibility","window","secretWord","Math","floor","random","length","getTile","createElement","classList","add","updateTile","letter","colourLetter","indexOf","toLowerCase","parseInt","colourLetterFalsely","handleEndGame","isWin","endSection","endMsg","wordReveal","result","toUpperCase","onclick","lieRate","grid","appendChild","createGrid","addEventListener","e","key","match","NUM_COLS","NUM_ROWS","word","tiles","querySelectorAll","getWord","includes","isValidWord","checkEndGame","colourWord","handleEnter"],"version":3,"file":"index.01a7c6ee.js.map"}